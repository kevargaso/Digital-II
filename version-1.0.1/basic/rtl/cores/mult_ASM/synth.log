
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4288 (git sha1 b2e97174, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1630451134687/work=/usr/local/src/conda/yosys-0.9_5586_gb2e97174 -fdebug-prefix-map=/home/carlos/miniconda3/envs/fpga=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)


-- Parsing `mult_32.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: mult_32.v
Parsing Verilog input from `mult_32.v' to AST representation.
Generating RTLIL representation for module `\mult_32'.
Successfully finished Verilog frontend.

-- Parsing `acc.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: acc.v
Parsing Verilog input from `acc.v' to AST representation.
Generating RTLIL representation for module `\acc'.
Successfully finished Verilog frontend.

-- Parsing `comp.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: comp.v
Parsing Verilog input from `comp.v' to AST representation.
Generating RTLIL representation for module `\comp'.
Successfully finished Verilog frontend.

-- Parsing `control_mult.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: control_mult.v
Parsing Verilog input from `control_mult.v' to AST representation.
Generating RTLIL representation for module `\control_mult'.
Successfully finished Verilog frontend.

-- Parsing `lsr.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: lsr.v
Parsing Verilog input from `lsr.v' to AST representation.
Generating RTLIL representation for module `\lsr'.
Successfully finished Verilog frontend.

-- Parsing `rsr.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: rsr.v
Parsing Verilog input from `rsr.v' to AST representation.
Generating RTLIL representation for module `\rsr'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top mult_32 -json mult_32.json; write_verilog -attr2comment mult_32_synth.v' --

7. Executing SYNTH_ICE40 pass.

7.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

7.2. Executing HIERARCHY pass (managing design hierarchy).

7.2.1. Analyzing design hierarchy..
Top module:  \mult_32
Used module:     \control_mult
Used module:     \acc
Used module:     \comp
Used module:     \lsr
Used module:     \rsr

7.2.2. Analyzing design hierarchy..
Top module:  \mult_32
Used module:     \control_mult
Used module:     \acc
Used module:     \comp
Used module:     \lsr
Used module:     \rsr
Removed 0 unused modules.
Warning: Resizing cell port mult_32.lsr0.s_A from 32 bits to 31 bits.

7.3. Executing PROC pass (convert processes to netlists).

7.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$257 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$250 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$246 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$239 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$236 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$233 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$230 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$227 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$219 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$212 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$208 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$201 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$198 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$195 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$192 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$189 in module SB_DFFSR.
Marked 2 switch rules as full_case in process $proc$rsr.v:8$15 in module rsr.
Marked 2 switch rules as full_case in process $proc$lsr.v:8$13 in module lsr.
Marked 5 switch rules as full_case in process $proc$control_mult.v:34$8 in module control_mult.
Marked 2 switch rules as full_case in process $proc$acc.v:10$1 in module acc.
Removed a total of 0 dead cases.

7.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 39 assignments to connections.

7.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$260'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$256'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$249'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$245'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$238'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$235'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$232'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$226'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$224'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$218'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$211'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$207'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$200'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$197'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$194'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$188'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$186'.
  Set init value: \Q = 1'0
Found init rule in `\control_mult.$proc$control_mult.v:0$12'.
  Set init value: \done = 1'0
  Set init value: \add = 1'0
  Set init value: \sh = 1'0
  Set init value: \reset = 1'0
  Set init value: \state = 3'000
Found init rule in `\comp.$proc$comp.v:0$7'.
  Set init value: \tmp = 1'0
Found init rule in `\acc.$proc$acc.v:0$3'.
  Set init value: \pp = 0

7.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$257'.
Found async reset \R in `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$246'.
Found async reset \S in `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$236'.
Found async reset \R in `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$230'.
Found async reset \S in `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$219'.
Found async reset \R in `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$208'.
Found async reset \S in `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$198'.
Found async reset \R in `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$192'.

7.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$260'.
Creating decoders for process `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$257'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$256'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$250'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$249'.
Creating decoders for process `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$246'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$239'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$238'.
Creating decoders for process `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$236'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$235'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$233'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$232'.
Creating decoders for process `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$227'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$226'.
Creating decoders for process `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$225'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$224'.
Creating decoders for process `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:846$223'.
Creating decoders for process `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$219'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$218'.
Creating decoders for process `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$212'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$211'.
Creating decoders for process `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$208'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Creating decoders for process `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$201'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$200'.
Creating decoders for process `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$198'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$197'.
Creating decoders for process `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$195'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$194'.
Creating decoders for process `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$189'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$188'.
Creating decoders for process `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$187'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$186'.
Creating decoders for process `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:269$185'.
Creating decoders for process `\rsr.$proc$rsr.v:8$15'.
     1/2: $2\s_B[15:0]
     2/2: $1\s_B[15:0]
Creating decoders for process `\lsr.$proc$lsr.v:8$13'.
     1/2: $2\s_A[30:0]
     2/2: $1\s_A[30:0]
Creating decoders for process `\control_mult.$proc$control_mult.v:0$12'.
Creating decoders for process `\control_mult.$proc$control_mult.v:34$8'.
     1/15: $5\state[2:0]
     2/15: $4\state[2:0]
     3/15: $3\state[2:0]
     4/15: $2\state[2:0]
     5/15: $2\count[3:0]
     6/15: $2\add[0:0]
     7/15: $2\reset[0:0]
     8/15: $2\sh[0:0]
     9/15: $2\done[0:0]
    10/15: $1\state[2:0]
    11/15: $1\count[3:0]
    12/15: $1\reset[0:0]
    13/15: $1\sh[0:0]
    14/15: $1\add[0:0]
    15/15: $1\done[0:0]
Creating decoders for process `\comp.$proc$comp.v:0$7'.
Creating decoders for process `\comp.$proc$comp.v:9$4'.
Creating decoders for process `\acc.$proc$acc.v:0$3'.
Creating decoders for process `\acc.$proc$acc.v:10$1'.
     1/2: $2\pp[31:0]
     2/2: $1\pp[31:0]

7.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\comp.\tmp' from process `\comp.$proc$comp.v:9$4'.
Removing init bit 1'0 for non-memory siginal `\comp.\tmp` in process `\comp.$proc$comp.v:9$4`.

7.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$257'.
  created $adff cell `$procdff$579' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$250'.
  created $dff cell `$procdff$580' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$246'.
  created $adff cell `$procdff$581' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$239'.
  created $dff cell `$procdff$582' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$236'.
  created $adff cell `$procdff$583' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$233'.
  created $dff cell `$procdff$584' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$230'.
  created $adff cell `$procdff$585' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$227'.
  created $dff cell `$procdff$586' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$225'.
  created $dff cell `$procdff$587' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:846$223'.
  created $dff cell `$procdff$588' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$219'.
  created $adff cell `$procdff$589' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$212'.
  created $dff cell `$procdff$590' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$208'.
  created $adff cell `$procdff$591' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$201'.
  created $dff cell `$procdff$592' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$198'.
  created $adff cell `$procdff$593' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$195'.
  created $dff cell `$procdff$594' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$192'.
  created $adff cell `$procdff$595' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$189'.
  created $dff cell `$procdff$596' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$187'.
  created $dff cell `$procdff$597' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:269$185'.
  created $dff cell `$procdff$598' with positive edge clock.
Creating register for signal `\rsr.\s_B' using process `\rsr.$proc$rsr.v:8$15'.
  created $dff cell `$procdff$599' with negative edge clock.
Creating register for signal `\lsr.\s_A' using process `\lsr.$proc$lsr.v:8$13'.
  created $dff cell `$procdff$600' with negative edge clock.
Creating register for signal `\control_mult.\done' using process `\control_mult.$proc$control_mult.v:34$8'.
  created $dff cell `$procdff$601' with positive edge clock.
Creating register for signal `\control_mult.\add' using process `\control_mult.$proc$control_mult.v:34$8'.
  created $dff cell `$procdff$602' with positive edge clock.
Creating register for signal `\control_mult.\sh' using process `\control_mult.$proc$control_mult.v:34$8'.
  created $dff cell `$procdff$603' with positive edge clock.
Creating register for signal `\control_mult.\reset' using process `\control_mult.$proc$control_mult.v:34$8'.
  created $dff cell `$procdff$604' with positive edge clock.
Creating register for signal `\control_mult.\state' using process `\control_mult.$proc$control_mult.v:34$8'.
  created $dff cell `$procdff$605' with positive edge clock.
Creating register for signal `\control_mult.\count' using process `\control_mult.$proc$control_mult.v:34$8'.
  created $dff cell `$procdff$606' with positive edge clock.
Creating register for signal `\acc.\pp' using process `\acc.$proc$acc.v:10$1'.
  created $dff cell `$procdff$607' with negative edge clock.

7.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$260'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$257'.
Removing empty process `SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$257'.
Removing empty process `SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$256'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$250'.
Removing empty process `SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$250'.
Removing empty process `SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$249'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$246'.
Removing empty process `SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$246'.
Removing empty process `SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$239'.
Removing empty process `SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$239'.
Removing empty process `SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$238'.
Removing empty process `SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$236'.
Removing empty process `SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$235'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$233'.
Removing empty process `SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$233'.
Removing empty process `SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$232'.
Removing empty process `SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$230'.
Removing empty process `SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$227'.
Removing empty process `SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$227'.
Removing empty process `SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$226'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$225'.
Removing empty process `SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$225'.
Removing empty process `SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$224'.
Removing empty process `SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:846$223'.
Removing empty process `SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$219'.
Removing empty process `SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$219'.
Removing empty process `SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$218'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$212'.
Removing empty process `SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$212'.
Removing empty process `SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$211'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$208'.
Removing empty process `SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$208'.
Removing empty process `SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$201'.
Removing empty process `SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$201'.
Removing empty process `SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$200'.
Removing empty process `SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$198'.
Removing empty process `SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$197'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$195'.
Removing empty process `SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$195'.
Removing empty process `SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$194'.
Removing empty process `SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$192'.
Removing empty process `SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$189'.
Removing empty process `SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$189'.
Removing empty process `SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$188'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$187'.
Removing empty process `SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$187'.
Removing empty process `SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$186'.
Removing empty process `SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:269$185'.
Found and cleaned up 2 empty switches in `\rsr.$proc$rsr.v:8$15'.
Removing empty process `rsr.$proc$rsr.v:8$15'.
Found and cleaned up 2 empty switches in `\lsr.$proc$lsr.v:8$13'.
Removing empty process `lsr.$proc$lsr.v:8$13'.
Removing empty process `control_mult.$proc$control_mult.v:0$12'.
Found and cleaned up 5 empty switches in `\control_mult.$proc$control_mult.v:34$8'.
Removing empty process `control_mult.$proc$control_mult.v:34$8'.
Removing empty process `comp.$proc$comp.v:0$7'.
Removing empty process `comp.$proc$comp.v:9$4'.
Removing empty process `acc.$proc$acc.v:0$3'.
Found and cleaned up 2 empty switches in `\acc.$proc$acc.v:10$1'.
Removing empty process `acc.$proc$acc.v:10$1'.
Cleaned up 29 empty switches.

7.3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module rsr.
Optimizing module lsr.
Optimizing module control_mult.
Optimizing module comp.
Optimizing module acc.
Optimizing module mult_32.

7.4. Executing FLATTEN pass (flatten design).
Deleting now unused module rsr.
Deleting now unused module lsr.
Deleting now unused module control_mult.
Deleting now unused module comp.
Deleting now unused module acc.

7.5. Executing TRIBUF pass.

7.6. Executing DEMINOUT pass (demote inout ports to input or output).

7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 0 unused cells and 68 unused wires.

7.9. Executing CHECK pass (checking for obvious problems).
Checking module mult_32...
Found and reported 0 problems.

7.10. Executing OPT pass (performing simple optimizations).

7.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 25 cells.

7.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\control0.$procmux$493.
    dead port 1/2 on $mux $flatten\control0.$procmux$503.
    dead port 1/2 on $mux $flatten\acc0.$procmux$574.
    dead port 1/2 on $mux $flatten\control0.$procmux$510.
    dead port 1/2 on $mux $flatten\control0.$procmux$520.
    dead port 1/2 on $mux $flatten\control0.$procmux$530.
    dead port 2/2 on $mux $flatten\control0.$procmux$465.
    dead port 1/2 on $mux $flatten\control0.$procmux$468.
    dead port 1/2 on $mux $flatten\control0.$procmux$540.
    dead port 2/2 on $mux $flatten\control0.$procmux$477.
    dead port 1/2 on $mux $flatten\control0.$procmux$480.
    dead port 2/2 on $mux $flatten\control0.$procmux$490.
    dead port 1/2 on $mux $flatten\control0.$procmux$550.
    dead port 1/2 on $mux $flatten\lsr0.$procmux$454.
    dead port 1/2 on $mux $flatten\rsr0.$procmux$445.
Removed 15 multiplexer ports.

7.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
    New ctrl vector for $pmux cell $flatten\control0.$procmux$523: { $flatten\control0.$procmux$491_CMP $auto$opt_reduce.cc:134:opt_mux$609 }
    New ctrl vector for $pmux cell $flatten\control0.$procmux$533: { $flatten\control0.$procmux$466_CMP $auto$opt_reduce.cc:134:opt_mux$611 }
    New ctrl vector for $pmux cell $flatten\control0.$procmux$543: { $auto$opt_reduce.cc:134:opt_mux$613 $flatten\control0.$procmux$497_CMP }
    New ctrl vector for $pmux cell $flatten\control0.$procmux$513: { $flatten\control0.$procmux$498_CMP $auto$opt_reduce.cc:134:opt_mux$615 }
  Optimizing cells in module \mult_32.
Performed a total of 4 changes.

7.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.10.6. Executing OPT_DFF pass (perform DFF optimizations).

7.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 0 unused cells and 40 unused wires.

7.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.10.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
Performed a total of 0 changes.

7.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.10.13. Executing OPT_DFF pass (perform DFF optimizations).

7.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.10.16. Finished OPT passes. (There is nothing left to do.)

7.11. Executing FSM pass (extract and optimize FSM).

7.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking mult_32.control0.state as FSM state register:
    Register has an initialization value.

7.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.12. Executing OPT pass (performing simple optimizations).

7.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
Performed a total of 0 changes.

7.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\rsr0.$procdff$599 ($dff) from module mult_32 (D = $flatten\rsr0.$0\s_B[15:0], Q = \rsr0.s_B).
Adding SRST signal on $flatten\lsr0.$procdff$600 ($dff) from module mult_32 (D = $flatten\lsr0.$2\s_A[30:0] [30:16], Q = \lsr0.s_A [30:16], rval = 15'000000000000000).
Adding EN signal on $flatten\lsr0.$procdff$600 ($dff) from module mult_32 (D = $flatten\lsr0.$0\s_A[30:0] [15:0], Q = \lsr0.s_A [15:0]).
Adding EN signal on $auto$opt_dff.cc:682:run$619 ($sdff) from module mult_32 (D = \lsr0.s_A [29:15], Q = \lsr0.s_A [30:16]).
Adding EN signal on $flatten\control0.$procdff$606 ($dff) from module mult_32 (D = $flatten\control0.$2\count[3:0], Q = \control0.count).
Adding SRST signal on $flatten\control0.$procdff$605 ($dff) from module mult_32 (D = $flatten\control0.$2\state[2:0], Q = \control0.state, rval = 3'000).
Adding EN signal on $flatten\control0.$procdff$604 ($dff) from module mult_32 (D = $flatten\control0.$2\reset[0:0], Q = \control0.reset).
Adding EN signal on $flatten\control0.$procdff$603 ($dff) from module mult_32 (D = $flatten\control0.$2\sh[0:0], Q = \control0.sh).
Adding EN signal on $flatten\control0.$procdff$602 ($dff) from module mult_32 (D = $flatten\control0.$2\add[0:0], Q = \control0.add).
Adding EN signal on $flatten\control0.$procdff$601 ($dff) from module mult_32 (D = $flatten\control0.$2\done[0:0], Q = \control0.done).
Adding SRST signal on $flatten\acc0.$procdff$607 ($dff) from module mult_32 (D = $flatten\acc0.$2\pp[31:0], Q = \acc0.pp, rval = 0).
Adding EN signal on $auto$opt_dff.cc:682:run$660 ($sdff) from module mult_32 (D = $flatten\acc0.$add$acc.v:15$2_Y, Q = \acc0.pp).

7.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 8 unused cells and 8 unused wires.

7.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.12.9. Rerunning OPT passes. (Maybe there is more to do..)

7.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
Performed a total of 0 changes.

7.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 5 cells.

7.12.13. Executing OPT_DFF pass (perform DFF optimizations).

7.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 0 unused cells and 5 unused wires.

7.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.12.16. Rerunning OPT passes. (Maybe there is more to do..)

7.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
Performed a total of 0 changes.

7.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.12.20. Executing OPT_DFF pass (perform DFF optimizations).

7.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.12.23. Finished OPT passes. (There is nothing left to do.)

7.13. Executing WREDUCE pass (reducing word size of cells).
Removed cell mult_32.$flatten\rsr0.$procmux$442 ($mux).
Removed top 15 bits (of 31) from mux cell mult_32.$flatten\lsr0.$procmux$457 ($mux).
Removed cell mult_32.$flatten\lsr0.$procmux$451 ($mux).
Removed top 1 bits (of 32) from port B of cell mult_32.$flatten\acc0.$add$acc.v:15$2 ($add).
Removed top 1 bits (of 3) from port B of cell mult_32.$flatten\control0.$procmux$498_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell mult_32.$flatten\control0.$procmux$488 ($mux).
Removed top 2 bits (of 3) from port B of cell mult_32.$flatten\control0.$procmux$478_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell mult_32.$flatten\control0.$procmux$475 ($mux).
Removed top 1 bits (of 3) from port B of cell mult_32.$flatten\control0.$procmux$466_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell mult_32.$flatten\control0.$gt$control_mult.v:85$10 ($gt).
Removed top 31 bits (of 32) from port B of cell mult_32.$flatten\control0.$add$control_mult.v:84$9 ($add).
Removed top 28 bits (of 32) from port Y of cell mult_32.$flatten\control0.$add$control_mult.v:84$9 ($add).
Removed top 2 bits (of 3) from wire mult_32.$flatten\control0.$3\state[2:0].
Removed top 2 bits (of 3) from wire mult_32.$flatten\control0.$4\state[2:0].
Removed top 28 bits (of 32) from wire mult_32.$flatten\control0.$add$control_mult.v:84$9_Y.
Removed top 15 bits (of 31) from wire mult_32.$flatten\lsr0.$0\s_A[30:0].
Removed top 15 bits (of 31) from wire mult_32.$flatten\lsr0.$2\s_A[30:0].
Removed top 1 bits (of 16) from wire mult_32.$flatten\rsr0.$2\s_B[15:0].

7.14. Executing PEEPOPT pass (run peephole optimizers).

7.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 0 unused cells and 8 unused wires.

7.16. Executing SHARE pass (SAT-based resource sharing).

7.17. Executing TECHMAP pass (map to technology primitives).

7.17.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

7.17.2. Continuing TECHMAP pass.
Using template $paramod$e4c92889d88a2565010b877d9939a0ac6b8fc9a2\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.

7.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 0 unused cells and 3 unused wires.

7.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mult_32:
  creating $macc model for $flatten\acc0.$add$acc.v:15$2 ($add).
  creating $macc model for $flatten\control0.$add$control_mult.v:84$9 ($add).
  creating $alu model for $macc $flatten\control0.$add$control_mult.v:84$9.
  creating $alu model for $macc $flatten\acc0.$add$acc.v:15$2.
  creating $alu cell for $flatten\acc0.$add$acc.v:15$2: $auto$alumacc.cc:485:replace_alu$671
  creating $alu cell for $flatten\control0.$add$control_mult.v:84$9: $auto$alumacc.cc:485:replace_alu$674
  created 2 $alu and 0 $macc cells.

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
Performed a total of 0 changes.

7.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.21.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:744:run$622 ($dffe) from module mult_32 (D = \A [0], Q = \lsr0.s_A [0], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:744:run$618 ($dffe) from module mult_32 (D = \B [15], Q = \rsr0.s_B [15], rval = 1'0).

7.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.21.9. Rerunning OPT passes. (Maybe there is more to do..)

7.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
Performed a total of 0 changes.

7.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.21.13. Executing OPT_DFF pass (perform DFF optimizations).

7.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.21.16. Finished OPT passes. (There is nothing left to do.)

7.22. Executing MEMORY pass.

7.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.22.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.22.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.22.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.22.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.22.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.22.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.22.9. Executing MEMORY_COLLECT pass (generating $mem cells).

7.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

7.25. Executing TECHMAP pass (map to technology primitives).

7.25.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

7.25.2. Continuing TECHMAP pass.
No more expansions possible.

7.26. Executing ICE40_BRAMINIT pass.

7.27. Executing OPT pass (performing simple optimizations).

7.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.27.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:744:run$630 ($dffe) from module mult_32 (D = $techmap670$flatten\control0.$gt$control_mult.v:85$10.A, Q = \control0.count, rval = 4'0000).

7.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 1 unused cells and 5 unused wires.

7.27.5. Rerunning OPT passes. (Removed registers in this run.)

7.27.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.27.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.27.8. Executing OPT_DFF pass (perform DFF optimizations).

7.27.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.27.10. Finished fast OPT passes.

7.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.29. Executing OPT pass (performing simple optimizations).

7.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
    Consolidated identical input bits for $mux cell $flatten\control0.$procmux$463:
      Old ports: A=3'001, B=3'100, Y=$flatten\control0.$5\state[2:0]
      New ports: A=2'01, B=2'10, Y={ $flatten\control0.$5\state[2:0] [2] $flatten\control0.$5\state[2:0] [0] }
      New connections: $flatten\control0.$5\state[2:0] [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control0.$ternary$control_mult.v:85$11:
      Old ports: A=3'100, B=3'000, Y=$flatten\control0.$ternary$control_mult.v:85$11_Y
      New ports: A=1'1, B=1'0, Y=$flatten\control0.$ternary$control_mult.v:85$11_Y [2]
      New connections: $flatten\control0.$ternary$control_mult.v:85$11_Y [1:0] = 2'00
  Optimizing cells in module \mult_32.
Performed a total of 2 changes.

7.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.29.6. Executing OPT_DFF pass (perform DFF optimizations).

7.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.29.9. Rerunning OPT passes. (Maybe there is more to do..)

7.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mult_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

7.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mult_32.
Performed a total of 0 changes.

7.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.29.13. Executing OPT_DFF pass (perform DFF optimizations).

7.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.29.16. Finished OPT passes. (There is nothing left to do.)

7.30. Executing ICE40_WRAPCARRY pass (wrap carries).

7.31. Executing TECHMAP pass (map to technology primitives).

7.31.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.31.2. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

7.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $lut.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$56f7ce6d87f8add68ca646dc02d7695a3189f8e5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
No more expansions possible.

7.32. Executing OPT pass (performing simple optimizations).

7.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 9 cells.

7.32.3. Executing OPT_DFF pass (perform DFF optimizations).

7.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 69 unused cells and 93 unused wires.

7.32.5. Finished fast OPT passes.

7.33. Executing ICE40_OPT pass (performing simple optimizations).

7.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) mult_32.$auto$alumacc.cc:485:replace_alu$674.slice[0].carry: CO=\control0.count [0]

7.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.33.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:527:simplemap_adff_sdff$948 ($_SDFF_PP0_) from module mult_32 (D = $flatten\control0.$procmux$496.Y_B [2], Q = \control0.state [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:527:simplemap_adff_sdff$947 ($_SDFF_PP0_) from module mult_32 (D = $flatten\control0.$procmux$496.Y_B [1], Q = \control0.state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:527:simplemap_adff_sdff$946 ($_SDFF_PP0_) from module mult_32 (D = $flatten\control0.$procmux$496.Y_B [0], Q = \control0.state [0], rval = 1'0).

7.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 3 unused cells and 4 unused wires.

7.33.6. Rerunning OPT passes. (Removed registers in this run.)

7.33.7. Running ICE40 specific optimizations.

7.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 4 cells.

7.33.10. Executing OPT_DFF pass (perform DFF optimizations).

7.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 0 unused cells and 4 unused wires.

7.33.12. Rerunning OPT passes. (Removed registers in this run.)

7.33.13. Running ICE40 specific optimizations.

7.33.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.33.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.33.16. Executing OPT_DFF pass (perform DFF optimizations).

7.33.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.33.18. Finished OPT passes. (There is nothing left to do.)

7.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

7.35. Executing TECHMAP pass (map to technology primitives).

7.35.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

7.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFFE_NP_ for cells of type $_DFFE_NP_.
Using template \$_SDFFCE_NP0P_ for cells of type $_SDFFCE_NP0P_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
No more expansions possible.

7.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping mult_32.$auto$alumacc.cc:485:replace_alu$674.slice[0].carry ($lut).

7.38. Executing ICE40_OPT pass (performing simple optimizations).

7.38.1. Running ICE40 specific optimizations.

7.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 47 cells.

7.38.4. Executing OPT_DFF pass (perform DFF optimizations).

7.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..
Removed 0 unused cells and 554 unused wires.

7.38.6. Rerunning OPT passes. (Removed registers in this run.)

7.38.7. Running ICE40 specific optimizations.

7.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mult_32.

7.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mult_32'.
Removed a total of 0 cells.

7.38.10. Executing OPT_DFF pass (perform DFF optimizations).

7.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mult_32..

7.38.12. Finished OPT passes. (There is nothing left to do.)

7.39. Executing TECHMAP pass (map to technology primitives).

7.39.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

7.39.2. Continuing TECHMAP pass.
No more expansions possible.

7.40. Executing ABC pass (technology mapping using ABC).

7.40.1. Extracting gate netlist of module `\mult_32' to `<abc-temp-dir>/input.blif'..
Extracted 107 gates and 180 wires to a netlist network with 73 inputs and 48 outputs.

7.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      51.
ABC: Participating nodes from both networks       =     116.
ABC: Participating nodes from the first network   =      55. (  94.83 % of nodes)
ABC: Participating nodes from the second network  =      61. ( 105.17 % of nodes)
ABC: Node pairs (any polarity)                    =      55. (  94.83 % of names can be moved)
ABC: Node pairs (same polarity)                   =      51. (  87.93 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

7.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       57
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       73
ABC RESULTS:          output signals:       48
Removing temp directory.

7.41. Executing ICE40_WRAPCARRY pass (wrap carries).

7.42. Executing TECHMAP pass (map to technology primitives).

7.42.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

7.42.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 2 unused cells and 139 unused wires.

7.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       89
  1-LUT                4
  2-LUT                5
  3-LUT               74
  4-LUT                6
  with \SB_CARRY    (#0)   33
  with \SB_CARRY    (#1)   33

Eliminating LUTs.
Number of LUTs:       89
  1-LUT                4
  2-LUT                5
  3-LUT               74
  4-LUT                6
  with \SB_CARRY    (#0)   33
  with \SB_CARRY    (#1)   33

Combining LUTs.
Number of LUTs:       89
  1-LUT                4
  2-LUT                5
  3-LUT               74
  4-LUT                6
  with \SB_CARRY    (#0)   33
  with \SB_CARRY    (#1)   33

Eliminated 0 LUTs.
Combined 0 LUTs.

7.44. Executing TECHMAP pass (map to technology primitives).

7.44.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

7.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$a670b08a47dd8a34f954c50cd06e9996d77e8467\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 183 unused wires.

7.45. Executing AUTONAME pass.
Renamed 1272 objects in module mult_32 (15 iterations).

7.46. Executing HIERARCHY pass (managing design hierarchy).

7.46.1. Analyzing design hierarchy..
Top module:  \mult_32

7.46.2. Analyzing design hierarchy..
Top module:  \mult_32
Removed 0 unused modules.

7.47. Printing statistics.

=== mult_32 ===

   Number of wires:                 88
   Number of wire bits:            437
   Number of public wires:          88
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                212
     SB_CARRY                       33
     SB_DFFE                         4
     SB_DFFESR                       4
     SB_DFFNE                       30
     SB_DFFNESR                     49
     SB_DFFSR                        3
     SB_LUT4                        89

7.48. Executing CHECK pass (checking for obvious problems).
Checking module mult_32...
Found and reported 0 problems.

7.49. Executing JSON backend.

8. Executing Verilog backend.
Dumping module `\mult_32'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 53594e920d, CPU: user 0.31s system 0.01s, MEM: 58.51 MB peak
Yosys 0.9+4288 (git sha1 b2e97174, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1630451134687/work=/usr/local/src/conda/yosys-0.9_5586_gb2e97174 -fdebug-prefix-map=/home/carlos/miniconda3/envs/fpga=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 30% 16x read_verilog (0 sec), 15% 1x abc (0 sec), ...
